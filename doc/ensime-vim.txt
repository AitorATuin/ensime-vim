*ensime-vim.txt*  An ensime wrapper

Author:  Olivier 'yazgoo' Abdesselam
         Jorge Vicente Cantero (jvican)
License: Same terms as Vim itself (see |license|)

This plugin is only available if 'compatible' is not set.

INTRODUCTION                                    *ensime-vim*

ensime-vim is a plugin for using Ensime with vim:
https://github.com/ensime/ensime-server

The Ensime server is meant to be an IDE for text editors.
It allows you to have access to plenty of useful IDE 
features while working with your preferred text editor.
It's meant to support both Java and Scala and it is
platform agnostic.

ENSIME FEATURES                                 *ensime-features*

This plugin is currently under development and hence some
features are not supported (mainly, most of the refactorings).
If you want to check those that are implemented, check *ensime-commands*.

Hard work is being done in this area and soon those missing features
will be available for any vim user.

COMMANDS                                        *ensime-commands*

These commands are local to the buffers in which they work.
They should be ran from

:EnClasspath            generates classpath for ensime and launch ensime-server
:EnType                 displays type under cursor
:EnInspectType          displays implemented interfaces and the type under cursor
:EnSearch               search for a public symbol
:EnShowPackage          open a new buffer with the package info for fully qualified package provided
:EnSymbol               displays the path where the symbol under cursor was declared
:EnDeclaration          open buffer where the symbol under cursor was declared
:EnDeclarationSplit     split window horizontally where the symbol under cursor was declared. Use v for vertical split
:EnDocUri               displays documentation url under cursor
:EnDocBrowse            launch $BROWSER (env variable) documentation url
:EnTypeCheck            launch a check on current file (launched on save)
:EnToggleFullType       set ensime to return either shallow types or full types
:EnCompleteFunc         get an omnicompletion menu (via ctrl+X ctrl+O) - blocking
:EnFormatSource         format file based (see https://github.com/ensime/ensime-emacs/wiki/Scalariform-Preferences)
:EnRename               rename symbol under cursor
:EnInline               inline the definition of the local symbol under cursor
:EnSuggestImport        suggests imports
:EnSetBreak             add a breakpoint on current line
:EnClearBreaks          remove all breakpoints
:EnDebug host port      attach to the specified debugging target
:EnContinue             continue debugging after pause
:EnBacktrace            show backtrace when execution is paused in a new buffer

PACKAGE INSPECTOR                               *ensime-package-inspector*

The package inspector is accessed using the :EnShowPackage command
as described above. Once in the inspector buffer, you can jump to
the definition of a particular symbol by pressing <Space> on the
symbol's line. There is a bit of a lag from the server, but the 
symbol's definition will be opened in a new vertical window.

NOTE: Currently the vertical split is not opened until you navigate away from
the Package Inspector window to a Scala file. This should be addressed in the
future.

CUSTOMIZING

If you want to use another highlight style for error, use:

    :let EnErrorStyle='YourHighlight'

For example:

    :let EnErrorStyle='Underlined'

Use vim's autocommand events to trigger type checks automatically, e.g:

    :autocmd BufWritePost *.scala :EnTypeCheck

This triggers type checks after each buffer write of a Scala file. Check
|autocmd-events-abc| for a comprehensive event list.

UPGRADING ENSIME SERVER

To upgrade ensime server, just do:

    $ rm -rf ~/.config/classpath_project_ensime

Restart vim en run EnClasspath

 vim:tw=78:ts=4:ft=help:norl:
